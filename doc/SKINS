ENIGMA2 SKINS
-------------

A skin file is an XML or set of XML file.  Review existing skins to get a 
feel for how skin files are structured.


COLORS:  <colors>
=================

You can define alias names for different colors.  The "value" is given as
#AARRGGBB, or just #RRGGBB hex values.  The AA value is the transparency 
level where 00 if fully opaque and FF is fully transparent.  The RR, GG 
and BB values are the red, green and blue, respectively, color levels 
where 00 is no contribution of that colour through to FF where that color 
is at full saturation.  Thus a color of 000000 is black while FFFFFF is 
white.


WINDOW STYLE:  <windowstyle>
============================

In this block you can specify default parameters that affect the default 
display of screens.  Defaults include foreground and background colors, 
title, menu and text colors, window borders etc.


SCREENS:  <screen>
==================

these are the different widgets for the screens. they can also be embedded
in the screens itself.


PIXMAP PATHS:
=============

there is no lookup order, but exactly one place to search for pixmaps.
You can either:
 - specify a full pathname (PLEASE, don't!), with a leading slash.
 - specify a relative pathname, without leading slash.
   The file will be searched for under the default skin image directory.
   use this to refer to pixmaps which are included in the default 
   distribution, i.e. no skin specific stuff but for example the 
   number bitmaps etc.
 - relative to the skin's directory (with a leading "~/").
   ~ in this case can be seen as the skin's "home directory", that's the 
   place where the skin.xml is.
   use this if you are building a skin.

Pixmap filenames in skins are resolved using
Tools.Directories.resolveFilename(SCOPE_GUISKIN, pngPath, path_prefix)
and resolveFilename(SCOPE_LCDSKIN, pngPath, path_prefix).

See doc/RESOLVEFILENAME for details of the lookups for those resolutions.

Worthy of note are:

When an embedded a screen's embedded self.skin or an entry in the
pixmaps attribute of a widget element implemented by
Components.Pixmap.MultiPixmap uses the "~/" path prefix, the
path_prefix parameter to resolveFilename() will be None unless the
screen skin element defines the skin_path attribute.

If the "~/" path prefix is used in a path resolved by resolveFilename()
and its path_prefix parameter is None, resolveFilename() will raise
an AssertionError exception and the whole readSkin() for the screen
will be aborted.

All skin pixmap attribute filenames are resolved by first resolving
the name using SCOPE_LCDSKIN, and then using the resolution
from SCOPE_GUISKIN if the pixmap file resolved using
SCOPE_LCDSKIN does not exist, whether the skin is for the
LCD display or not.

The pixmaps list in Components.Pixmap.MultiPixmap is resolved in
MultiPixmap.applySkin(), and resolves using SCOPE_SKINS,
SCOPE_LCDSKIN and SCOPE_GUISKIN in that priority order.

"~/" path prefix expansion does not work for expansion of pixmap filenames
in the pixmaps attribute of MultiPixmap widgets, nor does it work for
pixmap filenames used in the MultiContentEntryPixmap* functions in
Components.MultiContent.

Pixmaps loaded by the skin or MultiPixmap.applySkin() have any
resolved path suffix starting with '#' stripped from the path.
Using a '#' in a pixmap filename in that way will affect the pixmap
path resolution, because resolveFilename() is unaware of this feature
of skin.loadPixmap().

Finally, if rc_model.rcIsDefault() is False and the resolved pixmap
path contains either 'rc.png' or 'oldrc.png', the whole path is
replaced by rc_model.getRcLocation() + 'rc.png'.


A NOTE ABOUT PNGs:
==================

[ NB: The following is outdated and may be not accurate in a number of
      areas. Modern enigma2 hardware is less constrained than the original
      platform was at the time this was written. RTFS. ]

Enigma can use either a 32bit argb or an 8bit pseudocolor output. In any
case, enigma uses 8bit PNGs for skins.

Though it would be easy to support 32bit pngs as well, it questionable if
this would be a great idea.

a.) the quality improvement is relative

you can use another palette for each png. that gives you unique 256 colors
for each skin element. Unless you have very big PNGs, you shouldn't be able
to notice the difference between 32bit and 8bit.

b.) 32bit skins wouldn't be compatible to 8bit displays

we still want to use enigma on hardware which is too slow for using a 32bit
output (after all, framebuffers can be very slow). Turning a 32bit bitmap
into an 8bit one is not ease and involves a lot of computations.

It would end up that you need to specify an 8bit and a 32bit version. Is
that really what you want?

c.) 32bit PNGs don't compress well

PNG is a lossless format. 32bit bitmap data is very hard to compress 
lossless.

We could use JPG, but jpgs don't offer a transparency channel, as far as i
know.

So, how to make your PNGs to look good?

It's simple. Edit them as 32bit ARGB (photoshop, gimp should be able to do
this fine!). Be sure that if you want alphatest, transparency really has an
alpha value of 0 / 255 (i.e. the extreme).

When you're finished, use "pngquant 256 <filename>" to process your PNGs to
be compatible with enigma.


NOTE:
=====

if you're having less than 16 colors in your png file, pngquant generates a
16color (4bit) PNG, which is not really what we want. Either add more colors 
(evil workaround), fix enigma (good idea!) or patch pngquant to
always create 8bit pngs.


TRANSPARENCY:
=============

First, do not mix up transparency with alpha. I agree, both terms refer to
the same thing, but in our case, it's more complicated. As long as we don't
run on accelerated graphic, we need to differentiate between these two.

Alpha, in our context, is the ratio between the video and the OSD. Alpha = 0
means that OSD is completely visible, and no video, whereas Alpha = 1 (or
0xFF, if you express it so) means that there is only video.

Transparency, on the other hand, is OSD-only. When you have a background,
say a color, and you want to blit a picture on it, you can mix the
background with the picture. (*) This allows pixmap with a non-rectangular
shape.

Because of speed reasons, we don't support real alpha blending when not
running with acceleration. Instead, we use alpha testing. This means that a
special color is "transparent", whereas all other colors are not. This
colors *HAS TO BE AT INDEX 0*. As you can't count on automatic palette
merging (it's disabled when the target is 32bit, so you you're not
restricted to 8bit in total, only 8bit per pixmap), you have to tell your
gfx program to put the transparent color at index 0. This is what's normally
done, but in case transparency doesn't work correctly, you might want to
check this.


(*) Note, that, technically, if we start with a alpha=1 background (i.e.
only video), and alphablend on this, we generalized the problem enough that
we can handle both cases the same. But currently, we have to differentiate
between them, as we can't always alphablend simply for performance reasons.


LCD:
====

Right now, most lcd-skins ("summary screens") are implemented right in the
python screens. However, you can override them with regular skinfiles.

There is some confusion about the actual size of the LCD. For now, assume it
to be 132x64 pixel, but think of the fact that some (most?) hardware can
only display either 128 (dreambox) or 120 (dbox2, dm8000) pixels
horizontally.

Right now some pixels will be cropped, currently at the right side. This
will be (hopefully) fixed soon, so that the used pixels are always in the
center.

So, bottom line:

Design LCD skins for 132x64, with no important items (text etc.) at the
outermost 6 pixels on each side. In doubt, leave them white.


LCD COLOR SPACE:
================

current LCDs are not able to display grayscale graphics. For this, there
will be a 1bit quantization. However, skins should be designed for 8bit
grayscale (and still look good in 1bit!), because some next-generation
display might be able to display some shades of gray - likely not 256, but
maybe 16 or so.

---END---
